workflows:
  android-workflow:
    name: Android Workflow
    instance_type: mac_mini_m1
    max_build_duration: 120
    environment:
      groups:
        - google_credentials # <-- (Includes GCLOUD_KEY_FILE, GOOGLE_CREDENTIALS)
      vars:
        FIREBASE_PROJECT: "YOUR_FIREBASE_PROJECT_NAME" # <-- Put your Firebase Project Name here
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Set up debug.keystore
        script: |
          rm -f ~/.android/debug.keystore
          keytool -genkeypair -alias androiddebugkey -keypass android -keystore ~/.android/debug.keystore -storepass android -dname 'CN=Android Debug,O=Android,C=US' -keyalg 'RSA' -keysize 2048 -validity 10000
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Build APK with Flutter
        script: |
          flutter build apk --debug
      - name: Create debug and test APK
        script: |
          set -ex
          cd android
          ./gradlew app:assembleAndroidTest
          ./gradlew app:assembleDebug -Ptarget="$CM_BUILD_DIR/integration_test/app_test.dart"
      - name: Run Firebase Test Lab tests
        script: |
          set -ex

          echo $GCLOUD_KEY_FILE | base64 --decode > ./gcloud_key_file.json

          gcloud auth activate-service-account --key-file=gcloud_key_file.json

          gcloud --quiet config set project $FIREBASE_PROJECT

          gcloud firebase test android run \
            --type instrumentation \
            --app build/app/outputs/apk/debug/app-debug.apk \
            --test build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
            --timeout 3m
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
    publishing:
      # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
      email:
        recipients:
          - user_1@example.com
          - user_2@example.com
        notify:
          success: true # To not receive a notification when a build succeeds
          failure: false # To not receive a notification when a build fails
      slack:
        # See the following link about how to connect your Slack account - https://docs.codemagic.io/publishing-yaml/distribution/#slack
        channel: "#channel-name"
        notify_on_build_start: true # To receive a notification when a build starts
        notify:
          success: true # To not receive a notification when a build succeeds
          failure: false # To not receive a notification when a build fails
  ios-workflow:
      name: iOS Workflow
      instance_type: mac_mini_m1
      environment:
        xcode: 13.4.1
        groups:
          - ios_credentials
          - gcloud_credentials
        vars:
          FIREBASE_PROJECT: "flutter-integration-tests"
          BUNDLE_ID: "io.codemagic.ftlflutter"
          TEST_BUNDLE_ID: "io.codemagic.ftlflutter.uitests.xctrunner"
      scripts:
        - name: Configure Firebase access
          script: |
            set -e
            echo $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS > ./gcloud_key_file.json          
            gcloud auth activate-service-account --key-file=gcloud_key_file.json
            gcloud --quiet config set project $FIREBASE_PROJECT

        - keychain initialize
        - app-store-connect fetch-signing-files ${BUNDLE_ID} --create
        - app-store-connect fetch-signing-files ${TEST_BUNDLE_ID} --create
        - keychain add-certificates
        - xcode-project use-profiles --code-signing-setup-verbose-logging

        - name: Build app for testing
          script: |
            set -ex

            flutter build ios integration_test/app_test.dart --release

            cd ios
            xcodebuild \
              -workspace Runner.xcworkspace \
              -scheme Runner \
              -config Flutter/Release.xcconfig \
              -derivedDataPath "../build/ios_integ" \
              -sdk iphoneos \
              build-for-testing
        - name: Package tests bundle
          script: |
            set -ex
            cd ./build/ios_integ/Build/Products
            zip -r "ios_tests.zip" *-iphoneos *.xctestrun
        - name: Run tests in Firebase Test Lab
          script: gcloud firebase test ios run --test "build/ios_integ/Build/Products/ios_tests.zip"     
      artifacts:
        - "**/ios_tests.zip"
